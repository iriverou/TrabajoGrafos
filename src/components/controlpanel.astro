---

---

<div class="control-panel">
    <div class="control-section">
        <h4>Simulación</h4>
        <div class="control-buttons">
            <button class="btn play-btn ctrl-btn" id="play-pause-btn">
                <span id="play-icon">▶️</span>
                <span>Play</span>
            </button>
            <button class="btn btn-secondary step-btn ctrl-btn">
                <span>⏭️</span>
                <span>Paso</span>
            </button>
            <button class="btn btn-danger reset-btn ctrl-btn">
                <span>🔄</span>
                <span>Reset</span>
            </button>
        </div>
    </div>

    <div class="control-section">
        <h4>Velocidad</h4>
        <div class="speed-control">
            <input type="range" id="speed-slider" min="1" max="10" value="5" class="speed-slider">
            <div class="speed-labels">
                <span>Lento</span>
                <span id="speed-value">5x</span>
                <span>Rápido</span>
            </div>
        </div>
    </div>

    <div class="control-section">
        <h4>Información</h4>
        <div class="info-display">
            <div class="info-item">
                <span>Generación:</span>
                <span id="gen-display">0</span>
            </div>
            <div class="info-item">
                <span>Estado:</span>
                <span id="status-display">Detenido</span>
            </div>
        </div>
    </div>
</div>

<script>
    // Declarar el tipo global
    declare global {
        interface Window {
            wireworldApp: any;
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        let isRunning = false;
        let animationInterval: number | null = null;
        let speed = 5; // velocidad por defecto

        // Función auxiliar para verificar si la app está disponible
        function getWireworldApp() {
            if (window.wireworldApp) {
                return window.wireworldApp;
            }
            console.warn('WireworldApp no está disponible aún');
            return null;
        }

        const playPauseBtn = document.getElementById('play-pause-btn') as HTMLButtonElement | null;
        const playIcon = document.getElementById('play-icon') as HTMLElement | null;
        const stepBtn = document.querySelector('.step-btn') as HTMLButtonElement | null;
        const resetBtn = document.querySelector('.reset-btn') as HTMLButtonElement | null;
        const speedSlider = document.getElementById('speed-slider') as HTMLInputElement | null;
        const speedValue = document.getElementById('speed-value') as HTMLElement | null;
        const genDisplay = document.getElementById('gen-display') as HTMLElement | null;
        const statusDisplay = document.getElementById('status-display') as HTMLElement | null;

        // Verificar que todos los elementos existen
        if (!playPauseBtn || !playIcon || !stepBtn || !resetBtn || 
            !speedSlider || !speedValue || !genDisplay || !statusDisplay) {
            console.error('No se encontraron todos los elementos necesarios del panel de control');
            return;
        }

        // Play/Pause
        playPauseBtn.addEventListener('click', () => {
            try {
                if (isRunning) {
                    stopSimulation();
                } else {
                    startSimulation();
                }
            } catch (error) {
                console.error('Error al cambiar estado de simulación:', error);
            }
        });

        // Step
        stepBtn.addEventListener('click', () => {
            try {
                const app = getWireworldApp();
                if (app && app.engine && !isRunning) {
                    app.engine.step();
                    app.renderer.render(app.engine);
                    updateDisplay();
                }
            } catch (error) {
                console.error('Error al ejecutar paso:', error);
            }
        });

        // Reset
        resetBtn.addEventListener('click', () => {
            try {
                stopSimulation();
                const app = getWireworldApp();
                if (app && app.engine && app.renderer) {
                    app.engine.clear();
                    app.renderer.render(app.engine);
                    updateDisplay();
                }
            } catch (error) {
                console.error('Error al resetear simulación:', error);
            }
        });

        // Speed slider
        speedSlider.addEventListener('input', (e) => {
            try {
                const target = e.target as HTMLInputElement;
                if (target) {
                    speed = parseInt(target.value);
                    if (speedValue) {
                        speedValue.textContent = `${speed}x`;
                    }
                    
                    if (isRunning) {
                        stopSimulation();
                        startSimulation();
                    }
                }
            } catch (error) {
                console.error('Error al cambiar velocidad:', error);
            }
        });

        function startSimulation() {
            const app = getWireworldApp();
            if (!app || !app.engine || !app.renderer) {
                console.error('No se puede iniciar la simulación: app no disponible');
                return;
            }
            
            try {
                isRunning = true;
                if (playIcon) playIcon.textContent = '⏸️';
                if (playPauseBtn) {
                    const playText = playPauseBtn.querySelector('span:last-child');
                    if (playText) playText.textContent = 'Pause';
                }
                if (statusDisplay) statusDisplay.textContent = 'Ejecutando';
                
                const interval = Math.max(50, 1000 / speed);
                animationInterval = window.setInterval(() => {
                    try {
                        app.engine.step();
                        app.renderer.render(app.engine);
                        updateDisplay();
                    } catch (error) {
                        console.error('Error durante la simulación:', error);
                        stopSimulation();
                    }
                }, interval);
            } catch (error) {
                console.error('Error al iniciar simulación:', error);
                stopSimulation();
            }
        }

        function stopSimulation() {
            try {
                isRunning = false;
                if (playIcon) playIcon.textContent = '▶️';
                if (playPauseBtn) {
                    const playText = playPauseBtn.querySelector('span:last-child');
                    if (playText) playText.textContent = 'Play';
                }
                if (statusDisplay) statusDisplay.textContent = 'Detenido';
                
                if (animationInterval !== null) {
                    window.clearInterval(animationInterval);
                    animationInterval = null;
                }
            } catch (error) {
                console.error('Error al detener simulación:', error);
            }
        }

        function updateDisplay() {
            try {
                const app = getWireworldApp();
                if (app && app.engine && app.generationCounter && genDisplay) {
                    const generation = app.engine.generation;
                    genDisplay.textContent = generation.toString();
                    app.generationCounter.textContent = `Generación: ${generation}`;
                }
            } catch (error) {
                console.error('Error al actualizar display:', error);
            }
        }
    });
</script>

<style>
    :root {
        --color-bg-panel: #ffffff;
        --color-primary: #457b9d;
        --color-primary-dark: #2f5369;
        --color-btn-danger: #f26665;
        --color-btn-danger-hover: #e55555;
        --color-bg-light: #e6f1f8;
        --color-text-title: #52474d;
        --color-text-main: #333333;
        --color-accent: #82bcae;
        --color-info-bg: #e6f1f8;
        --color-shadow-panel: #52474d1a;
        --color-step-border: #ede6b8;
        --color-step-hover: #fffbe6;
        --color-slider-bg: #ede6b8;
        --color-slider-thumb: #82bcae;
        --color-btn-text: #ffffff;
    }

    .toolbar, .control-panel {
        background: var(--color-bg-panel);
        border: 2px solid var(--color-primary);
        border-radius: 12px;
        padding: 15px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        min-width: 0;
        box-shadow: 0 2px 4px var(--color-shadow-panel);
    }

    .control-section {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .control-section h4 {
        margin: 0;
        color: var(--color-text-title);
        font-size: 0.9em;
        text-transform: uppercase;
        border-bottom: 1px solid var(--color-bg-panel);
        padding-bottom: 5px;
    }

    .control-buttons {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .ctrl-btn {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px 12px;
        border: 2px solid var(--color-primary);
        background: var(--color-bg-panel);
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s;
        font-size: 0.85em;
        color: var(--color-text-title);
    }

    .ctrl-btn:hover {
        border-color: var(--color-primary);
        background-color: var(--color-bg-light);
        color: var(--color-text-main);
    }

    .play-btn {
        background-color: var(--color-primary);
        color: var(--color-btn-text);
        border-color: var(--color-primary);
    }
    .play-btn:hover {
        background-color: var(--color-primary-dark);
        color: var(--color-btn-text);
    }

    .reset-btn {
        background-color: var(--color-btn-danger);
        color: var(--color-btn-text);
        border-color: var(--color-btn-danger);
    }
    .reset-btn:hover {     
        background-color: var(--color-btn-danger-hover);
        color: var(--color-btn-text);
    }

    .step-btn {
        background-color: var(--color-bg-panel);
        color: var(--color-text-title);
        border-color: var(--color-step-border);
    }
    .step-btn:hover {
        background-color: var(--color-step-hover);
        color: var(--color-text-main);
    }

    .speed-control {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .speed-slider {
        width: 100%;
        height: 6px;
        border-radius: 3px;
        background: var(--color-slider-bg);
        outline: none;
        cursor: pointer;
    }
    .speed-slider::-webkit-slider-thumb {
        appearance: none;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: var(--color-slider-thumb);
        cursor: pointer;
    }

    .speed-labels {
        display: flex;
        justify-content: space-between;
        font-size: 0.75em;
        color: var(--color-text-title);
    }

    .info-display {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        padding: 6px 10px;
        background-color: var(--color-info-bg);
        border-radius: 4px;
        font-size: 0.85em;
    }
    .info-item span:first-child {
        color: var(--color-text-title);
    }
    .info-item span:last-child {
        font-weight: bold;
        color: var(--color-accent);
    }
</style>