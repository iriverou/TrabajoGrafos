---

---

<div class="toolbar">
    <div class="tool-section">
        <h4>Estados</h4>
        <div class="state-buttons">
            <button class="btn state-btn active" data-state="1">
                <div class="state-preview conductor"></div>
                <span>Conductor</span>
            </button>
            <button class="btn state-btn" data-state="2">
                <div class="state-preview electron-head"></div>
                <span>Cabeza</span>
            </button>
            <button class="btn state-btn" data-state="3">
                <div class="state-preview electron-tail"></div>
                <span>Cola</span>
            </button>
            <button class="btn state-btn" data-state="0">
                <div class="state-preview empty"></div>
                <span>Vac√≠o</span>
            </button>
        </div>
    </div>

    <div class="tool-section">
        <h4>Herramientas</h4>
        <div class="tool-buttons">
            <button class="btn tool-btn active" data-tool="brush">
                <span>‚úèÔ∏è</span>
                <span>Pincel</span>
            </button>
        </div>
    </div>

    <div class="tool-section">
        <h4>Tama√±o</h4>
        <div class="brush-size">
            <button class="btn size-btn active" data-size="1">1x1</button>
            <button class="btn size-btn" data-size="3">3x3</button>
            <button class="btn size-btn" data-size="5">5x5</button>
        </div>
    </div>

    <div class="tool-section">
        <h4>Acciones</h4>
        <button class="btn btn-danger action-btn clear-btn">
            <span>üóëÔ∏è</span>
            <span>Limpiar</span>
        </button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Funci√≥n auxiliar para verificar si la app est√° disponible
        function getWireworldApp() {
            if (window.wireworldApp) {
                return window.wireworldApp;
            }
            console.warn('WireworldApp no est√° disponible a√∫n');
            return null;
        }

        // Botones de estado
        const stateButtons = document.querySelectorAll('.state-btn');
        stateButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                try {
                    stateButtons.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    
                    const htmlBtn = btn as HTMLElement;
                    const state = parseInt(htmlBtn.dataset.state || '1');
                    const app = getWireworldApp();
                    
                    if (app && app.interactionHandler) {
                        const success = app.interactionHandler.setState(state);
                        if (!success) {
                            console.error('No se pudo establecer el estado');
                        }
                    }
                } catch (error) {
                    console.error('Error al cambiar estado:', error);
                }
            });
        });

        // Botones de herramientas
        const toolButtons = document.querySelectorAll('.tool-btn');
        toolButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                try {
                    toolButtons.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    
                    const htmlBtn = btn as HTMLElement;
                    const tool = htmlBtn.dataset.tool || 'brush';
                    const app = getWireworldApp();
                    
                    if (app && app.interactionHandler) {
                        app.interactionHandler.setTool(tool);
                    }
                } catch (error) {
                    console.error('Error al cambiar herramienta:', error);
                }
            });
        });

        // Botones de tama√±o
        const sizeButtons = document.querySelectorAll('.size-btn');
        sizeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                try {
                    sizeButtons.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    
                    const htmlBtn = btn as HTMLElement;
                    const size = parseInt(htmlBtn.dataset.size || '1');
                    const app = getWireworldApp();
                    
                    if (app && app.interactionHandler) {
                        const success = app.interactionHandler.setBrushSize(size);
                        if (!success) {
                            console.error('No se pudo establecer el tama√±o del pincel');
                        }
                    }
                } catch (error) {
                    console.error('Error al cambiar tama√±o del pincel:', error);
                }
            });
        });

        // Bot√≥n limpiar
        const clearBtn = document.querySelector('.clear-btn');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                try {
                    const app = getWireworldApp();
                    if (app && app.interactionHandler) {
                        app.interactionHandler.clearGrid();
                    }
                } catch (error) {
                    console.error('Error al limpiar la cuadr√≠cula:', error);
                }
            });
        }
    });
</script>

<style>
    .toolbar, .control-panel {
        background: #ffffff;
        border: 2px solid #457b9d;
        border-radius: 12px;
        padding: 15px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        min-width: 0;
        box-shadow: 0 2px 4px #52474d1a;
    }

    .tool-section {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .tool-section h4 {
        margin: 0;
        color: #52474d;
        font-size: 0.9em;
        text-transform: uppercase;
        border-bottom: 1px solid #ede6b8;
        padding-bottom: 5px;
    }

    .state-buttons, .tool-buttons {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .state-btn, .tool-btn, .action-btn, .size-btn {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px 12px;
        border: 2px solid #ede6b8;
        background: #ffffff;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s;
        font-size: 0.85em;
        color: #52474d;
    }

    .state-btn:hover {
        border-color: #ffd700;
        background-color: #fffbe6;
        color: #333333;
    }
    .tool-btn:hover {
        border-color: #00ffff;
        background-color: #e6ffff;
        color: #333333;
    }
    .size-btn:hover {
        border-color: #ff00ff;
        background-color: #ffe6ff;
        color: #333333;
    }
    .action-btn:hover, .clear-btn:hover {
        border-color: #f26665;
        background-color: #ffeaea;
        color: #f26665;
    }

    .state-btn.active, .tool-btn.active, .size-btn.active {
        background-color: #457b9d;
        color: #ffffff;
        border-color: #457b9d;
    }

    .state-preview {
        width: 16px;
        height: 16px;
        border: 1px solid #333333;
        border-radius: 2px;
    }

    .state-preview.empty { background-color: var(--color-empty); /* Estado vac√≠o (Wireworld) */ }
    .state-preview.conductor { background-color: var(--color-conductor); /* Estado conductor (Wireworld) */ }
    .state-preview.electron-head { background-color: var(--color-electron-head); /* Estado electron-head (Wireworld) */ }
    .state-preview.electron-tail { background-color: var(--color-electron-tail); /* Estado electron-tail (Wireworld, rojo consistente) */ }

    .brush-size {
        display: flex;
        gap: 5px;
    }

    .clear-btn {
        background-color: #f26665;
        color: #ffffff;
        border-color: #f26665;
    }

    .clear-btn:hover {
        background-color: #e55555;
        border-color: #e55555;
        color: #ffffff;
    }
</style>